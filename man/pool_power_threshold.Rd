% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power.R
\name{pool_power_threshold}
\alias{pool_power_threshold}
\alias{power_pool_random}
\alias{sample_size_threshold}
\alias{sample_size_threshold_pool_random}
\title{Power and sample size calculations for estimating population prevalence from
pooled samples}
\usage{
pool_power_threshold(
  x,
  cluster_number,
  prevalence_null,
  prevalence_alt,
  correlation,
  sig_level,
  alternative,
  form,
  link,
  ...
)

power_pool_random(
  catch_dist,
  pool_strat,
  cluster_number,
  prevalence_null,
  prevalence_alt,
  correlation = 0,
  sensitivity = 1,
  specificity = 1,
  sig_level = 0.05,
  alternative = "greater",
  form = "logitnorm",
  link = "logit",
  max_iter = 10000,
  rel_tol = 1e-06
)

sample_size_threshold(
  x,
  prevalence_null,
  prevalence_alt,
  correlation,
  power,
  sig_level,
  alternative,
  form,
  link,
  ...
)

sample_size_threshold_pool_random(
  catch_dist,
  pool_strat,
  prevalence_null,
  prevalence_alt,
  correlation = 0,
  sensitivity = 1,
  specificity = 1,
  power = 0.8,
  sig_level = 0.05,
  alternative = "greater",
  form = "logitnorm",
  link = "logit",
  max_iter = 10000,
  rel_tol = 1e-06
)
}
\arguments{
\item{x}{sample_design object.}

\item{cluster_number}{numeric The total number of clusters in a cluster
survey design (should be greater than 1) or 1 surveys where all collection
happens at a single site or collected via simple random sampling from the
target population.}

\item{prevalence_null, prevalence_alt}{numeric The proportion of units that
carry the marker of interest (i.e. true positive). `prevalence_null` is the
threshold to compare to and `prevalence_alt` is the design prevalence. Must
be be a numeric value between 0 and 1, inclusive of both.}

\item{correlation}{numeric The correlation between test results within a
single cluster (units in different clusters are assumed to be
uncorrelated). Must be a numeric value between 0 and 1, inclusive of both.
A value of 1 indicates that units within clusters are perfectly correlated
(there are no differences units within a single cluster). A value of 0
indicates that units within clusters are no more correlated than units in
different clusters.}

\item{sig_level}{numeric Significance level for statistical test. Defaults to
0.05. Must be strictly between 0 and 1.}

\item{alternative}{string The kind of comparison to make. If "greater"
(default) or "less" computes power of tests for one-sided comparisons that
population prevalence (`prevalence_alt`) is greater than or less than the
reference on threshold prevalence (`prevalence_null`) respectively. If
"two.sided" computes power for a two-sided comparison (`power_pool()`
only).}

\item{form}{string The distribution used to model the cluster-level
prevalence and correlation of units within cluster. Select one of "beta",
"logitnorm" or "cloglognorm". See details.}

\item{link}{string Transformation to be applied to prevalence estimates for
the purposes of calculating confidence intervals. Options are 'identity'
(i.e. no transformation), 'logit' (default), 'cloglog' and 'log'.}

\item{...}{Additional parameters.}

\item{catch_dist}{An object of class `distribution` (e.g. produced by
`nb_catch()`) defining the distribution of the possible catch.}

\item{pool_strat}{function Defines a rule for how a number of units will be
divided into pools. Must take a single numeric argument and return a named
list of pool sizes and pool numbers. `pool_max_size()` and
`pool_target_number()` provide convenience functions for defining common
pooling strategies.}

\item{sensitivity}{numeric The probability that the test correctly identifies
a true positive. Must be a numeric value between 0 and 1, inclusive of
both. A value of 1 indicates that the test can perfectly identify all true
positives.}

\item{specificity}{numeric The probability that the test correctly identifies
a true negative. Must be a numeric value between 0 and 1, inclusive of
both. A value of 1 indicates that the test can perfectly identify all true
negatives.}

\item{max_iter}{numeric Maximum number of iterations (possible catch sizes)
to consider when calculating expected FI over random catch sizes. Generally
needs to be large enough so that the nearly all catch sizes will be less
than `max_iter` otherwise algorithm will terminate early (with a warning)}

\item{rel_tol}{numeric Relative tolerance for determining convergence when
calculating expected FI over random catch sizes. Must be positive and
should be much smaller than 1.}

\item{power}{numeric The desired statistical power of the survey.}
}
\value{
The statistical power of the proposed design with regards to
  comparing prevalence to a threshold (`pool_power_threshold()`) or a list
  with the sample size (number of clusters, pools, and units) required to
  achieve desired power (`sample_size_threshold()`)
}
\description{
`pool_power_threshold()` calculates the statistical power of a pooled survey
design to determine whether population prevalence is different from a
threshold. `sample_size_threshold()` calculate the sample size required for a
pooled survey to achieve a specified power.
}
\examples{
# Fixed design examples ----
fd <- fixed_design(pool_size = 10, pool_number = 2)

## Unclustered ----
pool_power_threshold(fd, cluster_number = 50,
           prevalence_null = 0.01, prevalence_alt = 0.02)

sample_size_threshold(fd, prevalence_null = 0.01, prevalence_alt = 0.02)

## Clustered ----
pool_power_threshold(fd, cluster_number = 50,
           prevalence_null = 0.01, prevalence_alt = 0.02,
           correlation = 0.01)

sample_size_threshold(fd,
            prevalence_null = 0.01, prevalence_alt = 0.02,
            correlation = 0.01)

# Variable design examples ----
power_pool_random(nb_catch(20,25), pool_target_number(2), cluster_number = 50,
                  prevalence_null = 0.01, prevalence_alt = 0.02,
                  correlation = 0.01)

sample_size_threshold_pool_random(nb_catch(20,25), pool_target_number(2),
                        prevalence_null = 0.01, prevalence_alt = 0.02,
                         correlation = 0.01)
}
